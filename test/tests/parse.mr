@parse-test(One paragraph)
  @input*
    hi ho
    he
  @output*
    P
      "hi ho"
      "he"

@parse-test(Many paragraphs)
  @input*
    first first first

    second second
    second




    third
    third third
  @output*
    P
      "first first first"
    P
      "second second"
      "second"
    P
      "third"
      "third third"

@parse-test(Inline Elements)
  @input*
    @a@b@c
    @d
    @e  @f
    somewhat longer text@g
    @h ho
  @output*
    P
      I.a
      I.b
      I.c
      I.d
      I.e
      "  "
      I.f
      "somewhat longer text"
      I.g
      I.h
      " ho"

@parse-test(Inline Items)
  @input*
    @inline<@a  @b@c @d@e ho@f hi hu>
  @output*
    P
      I.inline[I.a, "  ", I.b, I.c, " ", I.d, I.e, " ho", I.f, " hi hu"]
 
@parse-test(Trim Arguments)
  @input*
    @cmd(   a   ,    b  ,, c )
  @output*
    P
      I.cmd(a, b, , c)

@parse-test(Command with block subcommands)
  @input*
    @main
      @a @b
      @c
  @output*
    B.main
      P
        I.a
        " "
        I.b
        I.c
  
@parse-test(Empty lines in subcommand)
  @input*
    @main
      abc

      def
  @output*
    B.main
      P
        "abc"
      P
        "def"
  
@parse-test(Indentation in inner text)
  @input*
    @command*
      1st@@b@@c
        2nd @z
      @3rd
  @output*
    B.command
    "1st@@b@@c
      2nd @z
    @3rd
    "
     
@parse-test(Different delimiters 1)
  @input*
    @a{[]@b[{]}
  @output*
    P
      I.a["[]", I.b["{"]]

@parse-test(Different delimiters 2)
  @input* 
    @a<A>@b<<B>>@c<<<C>>>@d<<<<D>>>>
  @output*
    P
      I.a["A"]
      I.b["B"]
      I.c["C"]
      I.d["D"]

@parse-test(Different delimiters 3 + no line)
  @input*
    @aaa[@bbb<@ccc>]
  @output*
    P
      I.aaa[I.bbb[I.ccc]]

@parse-test(Nested block commands)
  @input*
    @a
      @b
        @c
  @output*
    B.a
      B.b
        P
          I.c

@parse-test(More nested block commands)
  @input*
    @a
      @b
        @c
      @d
        @e
          @f
  @output*
    B.a
      B.b
        P
          I.c
      B.d
        B.e
          P
            I.f

@parse-test(C++ hello world)
  @input*
    @code*
      #include<iostream>
      using namespace std;

      int main() {
        cout << "hi" << endl;
      }
  @output*
    B.code
    "#include<iostream>
    using namespace std;

    int main() {
      cout << "hi" << endl;
    }
    "

@parse-test(Where empty lines attach 1)
  @input*
    @first
      1

    @second
      2

  @output*
    B.first
      P
        "1"
    B.second
      P
        "2"

@parse-test(Where empty lines attach 2)
  @input*
    @a
      1
    @b
      2

    @c
      3

    
    @d
      4

  @output*
    B.a
      P
        "1"
    B.b
      P
        "2"
    B.c
      P
        "3"
    B.d
      P
        "4"

@parse-test(Where empty lines attach 3)
  @input*
    @a
      1



    @b

  @output*
    B.a
      P
        "1"
    P
      I.b

@parse-test(Where empty lines attach 4)
  @input*
    @a


    @b

  @output*
    P
      I.a
    P
      I.b

@parse-test(Nested inline commands)
  @input*
    @big[[[@a{{1@b[[2@c@d{@e<3>}]]}}]]]
  @output*
    P
      I.big[I.a["1", I.b["2", I.c, I.d[I.e["3"]]]]]

@parse-test(numbers and dashes in commands)
  @input*
    @a123@123a
    @--dashes--(1)
  @output*
    P
      I.a123
      I.123a
      I.--dashes--(1)

@parse-test(graph testcase)
  @input*
    @table
      @header
        id | name
      1 | peter
      2 | paul
  @output*
    B.table
      B.header
        P
          "id | name"
      P
        "1 | peter"
        "2 | paul"
