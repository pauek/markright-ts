@test(simple text)
  @input
    hi
  @output*
    P
      "hi"

@test(two lines)
  @input
    hi
    ho
  @output*
    P
      "hi"
      "ho"

@test(Empty line)
  @input
    first

    third
  @output*
    P
      "first"
    P
      "third"

@test(simple command)
  @input
    @something
  @output*
    P
      I.something

@test(three inline commands <1>)
  @input
    @a@b@c
  @output*
    P
      I.a
      I.b
      I.c
  
@test(three inline commands <2>)
  @input
    @a
    @b
    @c
  @output*
    P
      I.a
      I.b
      I.c

@test(three inline commands <3>)
  @input
    @a@b
    @c
  @output*
    P
      I.a
      I.b
      I.c

@test(three inline commands <4>)
  @input
    @a@b
    @c
    @d@e
  @output*
    P
      I.a
      I.b
      I.c
      I.d
      I.e

@test(spaces between inline commands)
  @input
    @inline<@a  @b@c>
  @output*
    P
      I.inline[I.a, "  ", I.b, I.c] 

@test(spaces between inline commands 2)
  @input
    @a @b @c
  @output*
    P
      I.a
      " "
      I.b
      " "
      I.c
      
@test(text and inline commands)
  @input
    some text@a @b @c
  @output*
    P
      "some text"
      I.a
      " "
      I.b
      " "
      I.c    
  
@test(two lines with inline commands)
  @input
    @a@b@c
    @d@e
  @output*
    P
      I.a
      I.b
      I.c
      I.d
      I.e

@test(remove spaces in arguments)
  @input
    @cmd(   a   ,    b  ,, c )
  @output*
    P
      I.cmd(a, b, , c)

@test(remove spaces in arguments 2)
  @input
    @mycmd( a =  3 , b... ,  + +c + + )
      blis blas blus
  @output*
    B.mycmd(a =  3, b..., + +c + +)
      P
        "blis blas blus"

@test(text outside and inside)
  @input
    Text outside
    @cmd
      Text inside
  @output*
    P
      "Text outside"
    B.cmd
      P
        "Text inside"

@test(Command with block subcommands)
  @input
    @main
      @a @b
      @c
  @output*
    B.main
      P
        I.a
        " "
        I.b
        I.c    
  
@test(Empty lines in subcommand)
  @input
    @main
      abc

      def
  @output*
    B.main
      P
        "abc"
      P
        "def"
  
@test(Indentation in inner text)
  @input
    @command*
      1st@@b@@c
        2nd @z
      @3rd
  @output*
    B.command*
      1st@@b@@c
        2nd
      @3rd
     
@test(Different delimiters 1)
  @input
    @a{[]@b[{]}
  @output*
    Block(Line(@a{[]@b[{]))

@test(Different delimiters 2)
  @input 
    @a<A>@b<<B>>@c<<<C>>>@d<<<<D>>>>
  @output*
    P
      I.a["A"]
      I.b["B"]
      I.c["C"]
      I.d["D"]

@test(Different delimiters 3 + no line)
  @input
    @aaa[@bbb<@ccc>]
  @output*
    P
      I.aaa[I.bbb[I.ccc]]

@test(Nested block commands)
  @input
    @a
      @b
        @c
  @output*
    B.a
      B.b
        P
          I.c

@test(More nested block commands FIXME)
  @input
    @a
      @b
        @c
      @d
        @e
          @f
  @output*
    B.a
      B.b
        P
          I.c
      B.d
        B.e
          P
            I.f

@test(C++ hello world)
  @input
    @code*
      #include<iostream>
      using namespace std;

      int main() {
        cout << "hi" << endl;
      }
  @output*
    B.code*
      #include<iostream>
      using namespace std;

      int main() {
        cout << "hi" << endl;
      }

@test(Where empty lines attach 1)
  @input
    @first
      1

    @second
      2

  @output*
    B.first
      P
        "1"
    B.second
      P
        "2"

@test(Where empty lines attach 2)
  @input
    @a
      1
    @b
      2

    @c
      3

    
    @d
      4

  @output*
    B.a
      P
        "1"
    B.b
      P
        "2"
    B.c
      P
        "3"
    B.d
      P
        "4"

@test(Where empty lines attach 3)
  @input
    @a
      1



    @b

  @output*
    B.a
      P
        "1"
    P
      I.b

@test(Where empty lines attach 4)
  @input
    @a


    @b

  @output*
    P
      I.a
    P
      I.b

@test(Nested inline commands)
  @input
    @big[[[@a{{1@b[[2@c@d{@e<3>}]]}}]]]
  @output*
    P
      I.big[I.a["1"], I.b["2"], I.c, I.d[I.e["3"]]

@test(numbers and dashes in commands)
  @input
    @a123@123a
    @--dashes--(1)
  @output*
    P
      I.a123
      I.123a
      I.--dashes--(1)

@test(graph testcase)
  @input
    @table
      @header
        id | name
      1 | peter
      2 | paul
  @output*
    BlockElement{table
      BlockElement{header
        P
          "id | name"
  
      P
        "1 | peter"
        "2 | paul"

