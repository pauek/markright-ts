@walk-test(Text 1)
  @funcMap*
    [text]: ({ text }) => text.toUpperCase()
  @input
    hi
  @output*
    HI

@walk-test(Text 2)
  @funcMap*
    [text]: ({ text }) => text.toUpperCase(),
    [paragraph]: ({ children }) => children.join("\n")
  @input
    hello
    brodda
  @output*
    HELLO
    BRODDA

@walk-test(Element 1)
  @funcMap*
    elm: ({ args, children }) => `**${children.join("")}**`
  @input
    hola     @elm{que}    tal
  @output*
    hola **que** tal

@walk-test(Element 2)
  @funcMap*
    elm: ({ children }) => `**${children.join("")}**`
  @input
    @elm
      some content
    @elm
      some other content
  @output*
    **some content**
    **some other content**

@walk-test(Paragraph 1)
  @funcMap*
    [paragraph]: ({ children }) => children.join("<br>\n")
  @input
    some paragraph
    in more
    than one line
  @output*
    some paragraph<br>
    in more<br>
    than one line

@walk-test(Paragraph 2)
  @funcMap*
    [paragraph]: ({ children }) => children.join(" - ")
  @input
    a
    b
    c
  @output*
    a - b - c

@walk-test(Args 1)
  @funcMap*
    a: ({ args, children }) => `a(${args.join(", ")})[${children}]`,
  @input
    @a(1, 2){content}
  @output*
    a(1, 2)[content]

@walk-test(InlineElement)
  @funcMap*
    elem: ({ args, children }) => `[[${children.join("")}]]`,
  @input
    @elem{hi, there}
  @output*
    [[hi, there]]

@walk-test(Object 1)
  @funcMap*
    [paragraph]: ({ children }) => children /* avoid join */,
    name: ({ children }) => ({ name: children.join("") }),
    age: ({ children }) => ({ age: Number(children.join("")) }),
    obj: ({ children }) => Object.assign({}, ...children[0]),
    result: ({ children }) => JSON.stringify(children)
  @input
    @result
      @obj
        @name{James}
        @age{27}
      @obj
        @name{John}
        @age{13}
  @output*
    [{"name":"James","age":27},{"name":"John","age":13}]
